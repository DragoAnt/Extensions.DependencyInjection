<#@ template language="C#" linePragmas="false" inherits="BaseTransformation<ResolveReferencedDependenciesData>" visibility="internal" #>
// This file generated by DragoAnt.Extensions.DependencyInjection source generator.
// More details: https://github.com/DragoAnt/Extensions.DependencyInjection

<#
    foreach (var usingNs in Data
        .GetUsings("Microsoft.Extensions.DependencyInjection")
        .Except([Data.Namespace]))
    {
#>
using <#= usingNs #>;
<#
    }
#>

namespace <#= Data.Namespace #>;

internal static class ReferencedRegistrationExtensions
{
    /// <summary>
    /// Register all referenced dependencies.
    /// </summary>
    /// <remarks>Generated by <a href="https://github.com/DragoAnt/Extensions.DependencyInjection">DragoAnt.Extensions.DependencyInjection.Referenced</a> source generator.</remarks>
    public static void AddReferencedDependencies(this IServiceCollection services)
    {
<#
    foreach (var method in Data.GetReferencedDependenciesMethodsNames())
    {
#>
        <#= method #>(services);
<#
    }
#>
    }
<#
    //NOTE: We can guarantee that method is existed only if it will always generate
    if (Data.AlwaysGenerateOwnDependenciesMethod)
    {
#>

    /// <summary>
    /// Register all dependencies(referenced anf own).
    /// </summary>
    /// <remarks>Generated by <a href="https://github.com/DragoAnt/Extensions.DependencyInjection">DragoAnt.Extensions.DependencyInjection.Referenced</a> source generator.</remarks>
    public static void AddDependencies(this IServiceCollection services)
    {
        services.AddReferencedDependencies();
<#
        foreach (var method in Data.GetOwnDependenciesMethodsNames())
        {
#>
        <#= method #>(services);
<#
        }
#>
    }
<#
    }
#>
}