<#@ template language="C#" linePragmas="false" inherits="BaseTransformation<GenerationData>" visibility="internal" #>
// This file generated by DragoAnt.Extensions.DependencyInjection.Factory source generator

#nullable enable
<#
    foreach (var usingNs in Data
        .GetUsings("Microsoft.Extensions.DependencyInjection")
        .Except([Data.Namespace]))
    {
#>
using <#= usingNs #>;
<#
    }
#>

namespace <#= Data.Namespace #>;

/// <summary>
/// Factory dependency injection registration extensions.
/// </summary>
public static class <#= Data.MethodCodeName #>RegistrationExtensions
{
    /// <summary>
    /// <#= Data.MethodCodeName #> factories registration extensions.
    /// </summary>
    public static void Add<#= Data.MethodCodeName #>Factories(this IServiceCollection services)
    {
<#
    foreach (var factory in Data.Factories.OrderBy(v => v.FactoryClassName))
    {
#>
        services.Add<#= factory.Lifetime #><<#= factory.FactoryInterfaceName #>, <#= factory.FactoryClassName #>>();
<#
    }
#>
    }
}
<#
    foreach (var factory in Data.Factories.OrderBy(v => v.FactoryClassName))
    {
#>

/// <summary>
/// Factory contract for <see cref="<#= factory.InstanceClassName #>"/>.
/// </summary>
public interface <#= factory.FactoryInterfaceName #>
{
<#
        foreach (var method in factory.Methods)
        {
#>
    <#= factory.InstanceClassName #> Create(<#= method.GetParametersForSignature(true) #>);
<#
        }
#>
}

/// <summary>
/// Factory implementation for <see cref="<#= factory.InstanceClassName #>"/>.
/// </summary>
internal sealed class <#= factory.FactoryClassName #> : <#= factory.FactoryInterfaceName #>
{
    private readonly IServiceProvider _provider;

    public <#= factory.FactoryClassName #>(IServiceProvider provider)
    {
        _provider = provider;        
    }

<#
        foreach (var method in factory.Methods)
        {
#>
    <#= factory.InstanceClassName #> <#= factory.FactoryInterfaceName #>.Create(<#= method.GetParametersForSignature(false) #>)
        => new <#= factory.InstanceClassName #>(<#= method.GetParametersForCall("_provider") #>);
<#
        }
#>
}
<#
    }
#>