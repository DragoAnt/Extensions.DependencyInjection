<#@ template language="C#" linePragmas="false" inherits="BaseTransformation<GenerationData>" visibility="internal" #>
// This file generated by DragoAnt.Extensions.DependencyInjection.Factory source generator

#nullable enable
<#
    foreach (var usingNs in Data
        .GetUsings("Microsoft.Extensions.DependencyInjection")
        .Except([Data.Namespace]))
    {
#>
using <#= usingNs #>;
<#
    }
#>

namespace <#= Data.Namespace #>;

/// <summary>
/// Factory dependency injection registration extensions.
/// </summary>
public static class <#= Data.MethodCodeName #>RegistrationExtensions
{
    /// <summary>
    /// <#= Data.MethodCodeName #> factories registration extensions.
    /// </summary>
    public static void Add<#= Data.MethodCodeName #>Factories(this IServiceCollection services)
    {
<#
    foreach (var factory in Data.Factories.OrderBy(v => v.FactoryClassName))
    {
        var addService = $"services.Add{factory.Lifetime}";
        var interfaces = factory.GetImplementedInterfaces().ToArray();
        if (interfaces.Length > 1)
        {
#>
        <#= addService #><<#= factory.FactoryClassName #>>();
<#
            foreach (var iface in interfaces)
            {
#>
        <#= addService #><<#= iface #>>(p => p.GetRequiredService<<#= factory.FactoryClassName #>>());
<#
            }
        }
        else
        {
#>
        <#= addService #><<#= interfaces[0] #>, <#= factory.FactoryClassName #>>();
<#
        }
    }
#>
    }
}
<#
    foreach (var factory in Data.Factories.OrderBy(v => v.FactoryClassName))
    {
        if (!factory.SharedFactoryInterface.OnlySharedFactory)
        {
#>

/// <summary>
/// Factory contract for <see cref="<#= factory.InstanceClassName #>"/>.
/// </summary>
public interface <#= factory.FactoryInterfaceName #>
{
<#
            foreach (var method in factory.Methods)
            {
#>
    <#= factory.InstanceClassName #> Create(<#= method.GetParametersForSignature(true) #>);
<#
            }
#>
}
<#
        }
#>

<#= factory.GetError() #>
/// <summary>
/// Factory implementation for <see cref="<#= factory.InstanceClassName #>"/>.
/// </summary>
internal sealed class <#= factory.FactoryClassName #> : <#= string.Join(", ", factory.GetImplementedInterfaces()) #>
{
    private readonly IServiceProvider _provider;

    public <#= factory.FactoryClassName #>(IServiceProvider provider)
    {
        _provider = provider;        
    }

<#
        foreach (var method in factory.Methods)
        {
#>
    public <#= factory.InstanceClassName #> Create(<#= method.GetParametersForSignature(false) #>)
        => new <#= factory.InstanceClassName #>(<#= method.GetParametersForCall("_provider") #>);
<#
        }
#>
}
<#
    }
#>