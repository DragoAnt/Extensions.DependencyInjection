// This file generated by DragoAnt.Extensions.DependencyInjection source generator.
// More details: https://github.com/DragoAnt/Extensions.DependencyInjection



#nullable enable

using DragoAnt.Extensions.DependencyInjection.Example.Models;
using Microsoft.Extensions.DependencyInjection;
using System;
using static Microsoft.Extensions.DependencyInjection.ServiceLifetime;

[assembly:ResolveAssembly("TestAssembly.TestAssemblyDependencyExtensions.AddTestAssemblyDependencies")]

namespace TestAssembly;

/// <summary>
/// Dependency injection registration extensions.
/// </summary>
public static partial class TestAssemblyDependencyExtensions
{
    /// <summary>
    /// AddTestAssemblyDependencies dependencies and factories registration extension.
    /// </summary>
    /// <remarks>Generated by <a href="https://github.com/DragoAnt/Extensions.DependencyInjection">DragoAnt.Extensions.DependencyInjection</a> source generator.</remarks>
    public static void AddTestAssemblyDependencies(this IServiceCollection services)
    {
        Func<IServiceProvider, object> factory;

        services.Add(new(typeof(DbContext), GetDbContext, Scoped));
        services.Add(new(typeof(IBaseInterface), static p => p.GetRequiredService(typeof(DbContext)), Scoped));

        services.Add(new(typeof(IDbContextFactory), typeof(DbContextFactory), Scoped));

        services.Add(new(typeof(GenericInterfaceDepModel), typeof(GenericInterfaceDepModel), Singleton));
        factory = static p => p.GetRequiredService(typeof(GenericInterfaceDepModel));
        services.Add(new(typeof(BaseHierarchyDepModel), factory, Singleton));
        services.Add(new(typeof(IHierarchyDepModel), factory, Singleton));
        services.Add(new(typeof(ILevel1Interface), factory, Singleton));
        services.Add(new(typeof(IBaseInterface), factory, Singleton));
        services.Add(new(typeof(IGenericInterfaceDepModel<int>), factory, Singleton));

        services.Add(new(typeof(HierarchyDepModel), typeof(HierarchyDepModel), Singleton));
        factory = static p => p.GetRequiredService(typeof(HierarchyDepModel));
        services.Add(new(typeof(BaseHierarchyDepModel), factory, Singleton));
        services.Add(new(typeof(IHierarchyDepModel), factory, Singleton));
        services.Add(new(typeof(ILevel1Interface), factory, Singleton));
        services.Add(new(typeof(IBaseInterface), factory, Singleton));

        services.Add(new(typeof(ScopedDepModel), typeof(ScopedDepModel), Scoped));

        services.Add(new(typeof(SelfCustomFactoryRegistration), GetSelfCustomFactoryRegistration, Scoped));

        services.Add(new(typeof(SelfRegistration), typeof(SelfRegistration), Scoped));

        services.Add(new(typeof(SingletonDepModel), typeof(SingletonDepModel), Singleton));

        services.Add(new(typeof(SingletonHierarchyDepModel), typeof(SingletonHierarchyDepModel), Singleton));
        factory = static p => p.GetRequiredService(typeof(SingletonHierarchyDepModel));
        services.Add(new(typeof(BaseHierarchyDepModel), factory, Singleton));
        services.Add(new(typeof(IHierarchyDepModel), factory, Singleton));
        services.Add(new(typeof(ILevel1Interface), factory, Singleton));
        services.Add(new(typeof(IBaseInterface), factory, Singleton));
    }
    /// <summary>
    /// Custom factory method for <see cref="SelfCustomFactoryRegistration"/>. 
    /// </summary>
    private static partial SelfCustomFactoryRegistration GetSelfCustomFactoryRegistration(IServiceProvider provider);
    /// <summary>
    /// Custom factory method for <see cref="DbContext"/>. 
    /// </summary>
    private static partial DbContext GetDbContext(IServiceProvider provider);

}

/// <summary>
/// Factory contract for <see cref="DbContext"/>.
/// </summary>
public interface IDbContextFactory
{
    DbContext Create(string connString);
}

/// <summary>
/// Factory implementation for <see cref="DbContext"/>.
/// </summary>
internal sealed class DbContextFactory : IDbContextFactory
{
    private readonly IServiceProvider _provider;

    public DbContextFactory(IServiceProvider provider)
    {
        _provider = provider;        
    }

    DbContext IDbContextFactory.Create(string connString) 
         => new DbContext(connString);
}
