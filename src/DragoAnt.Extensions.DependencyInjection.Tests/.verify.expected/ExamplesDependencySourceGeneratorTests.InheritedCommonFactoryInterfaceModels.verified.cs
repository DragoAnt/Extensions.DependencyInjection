// This file generated by DragoAnt.Extensions.DependencyInjection source generator.
// More details: https://github.com/DragoAnt/Extensions.DependencyInjection



#nullable enable

using DragoAnt.Extensions.DependencyInjection.Example.Models;
using DragoAnt.Extensions.DependencyInjection.Example.Services;
using Microsoft.Extensions.DependencyInjection;
using System;
using static Microsoft.Extensions.DependencyInjection.ServiceLifetime;

[assembly:ResolveAssembly("TestAssembly.TestAssemblyDependencyExtensions.AddTestAssemblyDependencies")]

namespace TestAssembly;

/// <summary>
/// Dependency injection registration extensions.
/// </summary>
public static partial class TestAssemblyDependencyExtensions
{
    /// <summary>
    /// AddTestAssemblyDependencies dependencies and factories registration extension.
    /// </summary>
    /// <remarks>Generated by <a href="https://github.com/DragoAnt/Extensions.DependencyInjection">DragoAnt.Extensions.DependencyInjection</a> source generator.</remarks>
    public static void AddTestAssemblyDependencies(this IServiceCollection services)
    {
        Func<IServiceProvider,object> factory;

        services.Add(new ServiceDescriptor(typeof(InheritedCommonViewModelDoubledFactory), typeof(InheritedCommonViewModelDoubledFactory), Scoped));
        factory = static p => p.GetRequiredService<InheritedCommonViewModelDoubledFactory>();
        services.Add(new ServiceDescriptor(typeof(IInheritedCommonViewModelDoubledFactory), factory, Scoped));
        services.Add(new ServiceDescriptor(typeof(IInheritedCommonFactory<InheritedCommonViewModelDoubled>), factory, Scoped));

        services.Add(new ServiceDescriptor(typeof(InheritedCommonViewModelFactory), typeof(InheritedCommonViewModelFactory), Scoped));
        factory = static p => p.GetRequiredService<InheritedCommonViewModelFactory>();
        services.Add(new ServiceDescriptor(typeof(IInheritedCommonViewModelFactory), factory, Scoped));
        services.Add(new ServiceDescriptor(typeof(IInheritedCommonFactory<InheritedCommonViewModel>), factory, Scoped));
    }

}

/// <summary>
/// Factory contract for <see cref="InheritedCommonViewModelDoubled"/>.
/// </summary>
public interface IInheritedCommonViewModelDoubledFactory
{
    InheritedCommonViewModelDoubled Create(int defaultLen = 100, double defaultDblLen = 10.01);
    InheritedCommonViewModelDoubled Create(int length, int defaultLen = 100, double defaultDblLen = 10.01);
}

/// <summary>
/// Factory implementation for <see cref="InheritedCommonViewModelDoubled"/>.
/// </summary>
internal sealed class InheritedCommonViewModelDoubledFactory : IInheritedCommonViewModelDoubledFactory, IInheritedCommonFactory<InheritedCommonViewModelDoubled>
{
    private readonly IServiceProvider _provider;

    public InheritedCommonViewModelDoubledFactory(IServiceProvider provider)
    {
        _provider = provider;        
    }

    InheritedCommonViewModelDoubled IInheritedCommonViewModelDoubledFactory.Create(int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModelDoubled(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    InheritedCommonViewModelDoubled IInheritedCommonViewModelDoubledFactory.Create(int length, int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModelDoubled(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    InheritedCommonViewModelDoubled IInheritedCommonFactory<InheritedCommonViewModelDoubled>.Create(int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModelDoubled(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    InheritedCommonViewModelDoubled IInheritedCommonFactory<InheritedCommonViewModelDoubled>.Create(int length, int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModelDoubled(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
}

/// <summary>
/// Factory contract for <see cref="InheritedCommonViewModel"/>.
/// </summary>
public interface IInheritedCommonViewModelFactory
{
    InheritedCommonViewModel Create(int defaultLen = 100, double defaultDblLen = 10.01);
    InheritedCommonViewModel Create(int length, int defaultLen = 100, double defaultDblLen = 10.01);
}

/// <summary>
/// Factory implementation for <see cref="InheritedCommonViewModel"/>.
/// </summary>
internal sealed class InheritedCommonViewModelFactory : IInheritedCommonViewModelFactory, IInheritedCommonFactory<InheritedCommonViewModel>
{
    private readonly IServiceProvider _provider;

    public InheritedCommonViewModelFactory(IServiceProvider provider)
    {
        _provider = provider;        
    }

    InheritedCommonViewModel IInheritedCommonViewModelFactory.Create(int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModel(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    InheritedCommonViewModel IInheritedCommonViewModelFactory.Create(int length, int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModel(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    InheritedCommonViewModel IInheritedCommonFactory<InheritedCommonViewModel>.Create(int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModel(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    InheritedCommonViewModel IInheritedCommonFactory<InheritedCommonViewModel>.Create(int length, int defaultLen, double defaultDblLen) 
         => new InheritedCommonViewModel(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
}
