// This file generated by DragoAnt.Extensions.DependencyInjection.Factory source generator

#nullable enable

using DragoAnt.Extensions.DependencyInjection.Example.Models;
using DragoAnt.Extensions.DependencyInjection.Example.Services;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace NotSetRootNamespace;

/// <summary>
/// Factory dependency injection registration extensions.
/// </summary>
public static class NotSetMethodNameRegistrationExtensions
{
    /// <summary>
    /// NotSetMethodName dependencies and factories registration extension.
    /// </summary>
    /// <remarks>Generated by <a href="https://github.com/DragoAnt/Extensions.DependencyInjection">DragoAnt.Extensions.DependencyInjection</a> source generator.</remarks>
    public static void AddNotSetMethodNameDependencies(this IServiceCollection services)
    {
        services.AddScoped<CommonViewModelDoubledFactory>();
        services.AddScoped<ICommonViewModelDoubledFactory>(p => p.GetRequiredService<CommonViewModelDoubledFactory>());
        services.AddScoped<ICommonFactory<CommonViewModelDoubled>>(p => p.GetRequiredService<CommonViewModelDoubledFactory>());
        services.AddScoped<CommonViewModelFactory>();
        services.AddScoped<ICommonViewModelFactory>(p => p.GetRequiredService<CommonViewModelFactory>());
        services.AddScoped<ICommonFactory<CommonViewModel>>(p => p.GetRequiredService<CommonViewModelFactory>());
    }
}

/// <summary>
/// Factory contract for <see cref="CommonViewModelDoubled"/>.
/// </summary>
public interface ICommonViewModelDoubledFactory
{
    CommonViewModelDoubled Create(int defaultLen = 100, double defaultDblLen = 10.01);
    CommonViewModelDoubled Create(int length, int defaultLen = 100, double defaultDblLen = 10.01);
}

/// <summary>
/// Factory implementation for <see cref="CommonViewModelDoubled"/>.
/// </summary>
internal sealed class CommonViewModelDoubledFactory : ICommonViewModelDoubledFactory, ICommonFactory<CommonViewModelDoubled>
{
    private readonly IServiceProvider _provider;

    public CommonViewModelDoubledFactory(IServiceProvider provider)
    {
        _provider = provider;        
    }

    CommonViewModelDoubled ICommonViewModelDoubledFactory.Create(int defaultLen, double defaultDblLen) =>
        new CommonViewModelDoubled(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    CommonViewModelDoubled ICommonViewModelDoubledFactory.Create(int length, int defaultLen, double defaultDblLen) =>
        new CommonViewModelDoubled(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    CommonViewModelDoubled ICommonFactory<CommonViewModelDoubled>.Create(int defaultLen, double defaultDblLen) =>
        new CommonViewModelDoubled(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    CommonViewModelDoubled ICommonFactory<CommonViewModelDoubled>.Create(int length, int defaultLen, double defaultDblLen) =>
        new CommonViewModelDoubled(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
}

/// <summary>
/// Factory contract for <see cref="CommonViewModel"/>.
/// </summary>
public interface ICommonViewModelFactory
{
    CommonViewModel Create(int defaultLen = 100, double defaultDblLen = 10.01);
    CommonViewModel Create(int length, int defaultLen = 100, double defaultDblLen = 10.01);
}

/// <summary>
/// Factory implementation for <see cref="CommonViewModel"/>.
/// </summary>
internal sealed class CommonViewModelFactory : ICommonViewModelFactory, ICommonFactory<CommonViewModel>
{
    private readonly IServiceProvider _provider;

    public CommonViewModelFactory(IServiceProvider provider)
    {
        _provider = provider;        
    }

    CommonViewModel ICommonViewModelFactory.Create(int defaultLen, double defaultDblLen) =>
        new CommonViewModel(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    CommonViewModel ICommonViewModelFactory.Create(int length, int defaultLen, double defaultDblLen) =>
        new CommonViewModel(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    CommonViewModel ICommonFactory<CommonViewModel>.Create(int defaultLen, double defaultDblLen) =>
        new CommonViewModel(_provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
    CommonViewModel ICommonFactory<CommonViewModel>.Create(int length, int defaultLen, double defaultDblLen) =>
        new CommonViewModel(length, _provider.GetRequiredService<TestService>(), defaultLen, defaultDblLen);
}
